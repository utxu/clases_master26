echo $SHELL
echo $TERM
whoami
echo $HOST
echo $USER
printenv
echo $USER
echo $HOME
echo $OLDPWD
clear
echo "hola $HOST"
echo hola
echo "a" "a"
echo '$HOST'
echo "$HOST"
echo  date 
date
echo today is `date`
echo today is `echo date`
echo today is ``echo date``
echo today is $(date)
echo today is $(echo $(date))
echo "hola\
y adios"
echo "hola\
y adios\
!\
"
echo "hoy es \\
mi diaecho "hola\
y adios\
!\
""
echo "hoy es \\
mi dia"
skfndafdjf
dsgsdgvds
echo "sfjdkfj\
\

echo hola
echo "my favorite \"esta\""
echo "this is in \n  2 lienas!\
"
echo bara t es un tabulador \t hola
echo holi;echo guapi
for f in $(ls); do echo "there is a $f";done

# cat send el contenido to an stdout:
cat /etc/os-release # con este comando podemos ver las caracter√≠sticas de nuestro SO

# cd es el comando de navegaci√≥n, con este comando nos podemos ir moviendo a trav√©s de los 
# directorios:

cd Data/shell # Nos situamos en la subcarpeta 'shell' de la carpeta Data

cat Text_example.txt # con cat extraemos el contenido del archivo indicado 

cd Data/shell 
cat Text_example.txt
cat Text_example.txt Text_example.txt # duplicamos en pantalla el contenido del archivo

echo "cat es de concatenate"

cat -n  Text_example.txt # Lanzamos el contenido del archivo con n√∫meros de l√≠nea

pwd # en qu√© directorio nos encontramos??

cd ~ # regresamos al directorio del usuario 

echo $PWD # dime cu√°l es el directorio en el que me encuentro y q est√° guardado en dicha variable

cd /etc

cd .. # regresemos al directorio superior inmediato al que estoy

ls # imprime los contenidos del directorio en el que me encuentro:
# en azul los directorios, en blanco los archivos..

ls -a # muestra todo, hasta los archivos ocultos que est√°n precedidos por un "." (ocultos).

ls -al # argumento l, muestralo en formato long

ls -1 # ahora en formato largo sin mostrar los archivos ocultos

ls -1 -s  # argumento -s de short, en orden alfabetico

ls --help # solicitamos la ayuda para conocer el comando ls

ls -l -1 # argumento -1, muestra un archivo por linea

ls -l1s # formato long, uno por linea y ordenado por orden alfabetico

ls -la # formato long y me muestras todos los archivos incluidos los ocueltos

ls -S # S mayuscula, ordena los archivos por su tama√±o de mayor a menor

ls -Sr # argumento r los ordena en orden inverso, y aqu√≠, en formato ancho

ls -aSr # todos los archivos, en orden de tama√±o pero en orden contrario, empezando por el peque√±o

ls -laSr # en formato largo, todos los arvhios, de menor a mayor y en orden inverso

ls -lat # en formato largo, todos los archivos, y el argumento t es por orden de modificaci√≥n/tiempo

# PERMISOS: 

# comando 'chmod' gestiona los permisos de escritura, lectura y ejecuci√≥n de los archivos. Se suele trabajar con
# los siguientes n√∫meros:
# Lectura: 4
# Escritura: 2
# Ejecuci√≥n: 1

# De esta forma podemos combiar de forma eficiente los permisos. Hay 3 n√∫meros correspondientes a 3 posiciones:
# user/group/other, en los cuales encontramos.. 
-r: read (4)
-w: write (2)
-x: execute (1)

# en el siguiente comando el primer 7 se refiere al user, 4 (lectura), 2 (escritura) y 1 (ejecuci√≥n) 
# suma 7, por lo q tiene el usuario todos los permisos. El segundo n√∫mero hacer referencia al grupo, y el tercer
# n√∫mero hace referencia al resto del mundo. Por lo que en el siguiente comando estamos explicitando que cualquier
# usuario tiene todos los permisos (777) en el archivo .history
chmod 777 .history

ls -l .history # ordenamos el formato long el archivo history

chmod 555 .history # le otorfamos a todos los usuarios el permiso de lectura y ejecucion (4+1)

ls -l .history
chmod 644 .history # Le otorfamos al usuario el permido de lectura y escritura (4+2) y al grupo y al resto, solo
# el permiso de lectura 

l -ls .history # visualizamos

chmod 600 .history  # con 0 nO concedemos ningun permiso, en este a caso a cualquiera q no sea le usuario

ls -l .history

# CREACION DE DIRECTORIOS:

mkdir

mkdir holiguapi # creamos esta carpeta en el working directory en el que nos encontramos..

mkdir -p holiguapi/cosas/nazis # con el argumento -p est√° creando una cadena de directorios nuevos (cosas/nazis)
# no exist√≠a, crea toda la ruta

# el comando 'touch' crea un nuevo archivo vac√≠o o actualiza el acceso de un archivo existente (elegance in the name), o
# tambi√©n nos indica la √∫ltima hora de de acceso/lectura de un archivo o su ultima fecha de modificaci√≥n.

touch newfile # crea el nuevo archivo vac√≠o con el nombre 'newfile'

ls -l

touch anaconda3 # le damos un toque a anaconda3 y se actualiza la fecha de modificaci√≥n

ls -l

# COMANDO COPY CP

cp <source dir> <destination dir> 

# el comando cp copia uno o m√°s arhcivos en un directorio

cp newfile holiguapi/cosas/nazis   # Copiamos el archivo newfile al nuevo directorio

ls holiguapi/cosas/nazis   # vamos a verlo... 

cp -r holiguapi minuevofolder  # copia directorios de forma recursiva...


# El comando mv puede renombrar tambi√©n un archivo.

mv antiguo_file nuevo_file

# o puede mover archivo/s de un directorio a otro:

mv file1 file2 dir1 dir2 a_directorio_de_destino

ls -l
ls -rf  minuvofolder
rm -rf  minuvofolder
ls -l
mkdir 
mkdir --help
~ cd
mkdir first_dir
ls 
cat .history
ls

# EJERCICIOS: -------------------------------------------------- 

cd first_dir
touch "text_file.txt" # 2. crea un archivo vacio en first_dir
ls
pwd

chmod g+x,o+w text_file.txt # 3 a√±ade permisos de ejecucion al grupo de ususarios y escritura al resto 

sub1 mkdir sub2 sub3 # crea 3 subdirectorios en first_dir
 
ls
.history
cd ~
.history
history
cat .history
pwd first_dir
cd /first_dir
ls
cd first_dir

cp "text_file.txt" sub1/ # 4. copia text_file en el subdirectorio 1 <file_in_soruce_dir> <destination_dir>

cd /sub1
pwd
pwd sub1

mv --help

mv "text_file.txt" sub2/ "text_file2.txt" # 6. mueve el archivo al directorio sub2 con el nombre test_file2.txt

# Copia el directorio 1 entero en el directorio 3:
cp -r sub1/ sub3/

# 8. Change file name of ‚Äúfirst_dir /sub3/text_file.txt.2‚Äù to ‚Äúfirst_dir /sub3/text_file.txt.backup‚Äù
mv sub3/text_file.txt.2 sub3/text_file.txt.backup

# 9. Move ‚Äúfirst_dir /sub2/text_file.txt.backup‚Äù to ‚Äúfirst_dir‚Äù directory file as hidden
mv sub2/text_file.txt.backup ./.text_file.txt.backup

# 10. Delete the ‚Äúsub2‚Äù subdirectory

# el comando rm elimina directorios <rm file1 file 2> o recursivamente elimina directorios <rm -r dir1 dir2>
rm -r sub2/

# USAMOS GIT:

git # con este comando nos aparece una ventana explicativa de los comando de git:

cd ~ # nos ubicamos en el root directory..

clear # limpiamos la terminal..

# Y AHORA VAMOS A CREAR NUESTRO GIT EN LINUX:
git config --global user.name "Alvaro Diez"
git config --global user.email "alvzotegui@gmail.com"

cat ~/.gitconfig # visualiamos los datos que acabamos de introducir..

# EXTRAEMOS EL REPOSITORIO QUE HEMOS CREADO PREVIAMENTE EN GITHUB:
git clone https://github.com/utxu/kschool_master_26.git
ls
cd kschool_master_26
ls
ls -a


git status
touch dos_file
git add chachi_file
git status
git commit -m "a√±ado un archivo chachi"
git status
git push
git diff
pwd
ls
git clone [200~https://github.com/utxu/master_KS_26.git~
git clone https://github.com/utxu/master_KS_26
git clone https://github.com/utxu/master_KS_26.git
cd master_KS_26
ll -a
cd ..
ll
git clone https://github.com/utxu/master_KS_26.git master_KS_26_copy
cd master_KS_26
gedit README.md
git status
git add README.md
git status
git commit 
git log
gitedit README.md
gedit README.md
git status
git commit -m edit second line
git commit -m "edit second line"
git status
git log
git push
git add -u
git status
git commit -m "otro actualizacion"
git push
cd ~ 
git init repo_local
cd repo_local
ll -a
touch my_ideas.txt
gedit my_ideas.txt
git add my_ideas.txt
git commit -m "mi primera idea"
git status
git log
ll
l
gedit my_second_idea.txt
git status
git log
gedit my_ideas.txt
git log
git add -u
git status
git add my_second_idea.txt
git status
git commit -m "subir los dos ficheros"
git log
git remote add origin https://github.com/utxu/my_ideas.git
git branch -M main
git push -u origin main
git log
cd ~ 
man cp
man mv
cat --help
less gitconfig
less.gitconfig
cd repo_local
less .gitconfig
cd Data/opentraveldata
cd~ 
cd ~ 
cd Data/opentraveldata
ll
less optd_aircraft.csv
less airline_nb_of_fligths.csv
less ref_airline_nb_of_fligths.csv
less ref_airline_nb_of_flights.csv
less optd_por_public.csv
less -N -S  optd_por_public.csv
git clone https://github.com/utxu/master_KS_26.git master_KS_26_copy
git commit -m "mi primera idea"
ll
rm -rf master_ks_26_copy
ll
alias
l
type ll
alias gs="git status"
gs
lls .zshrc
ls .zshrc
ls zshrc
less .zshrc
cd ~
less .zshrc
type python
which python
whereir python
whereis python
which python
sudo which python
clear
cd Data/shell
head Finn.txt
head -5 Finn.txt
head -n 5 Finn.txt
head -n -5 Finn.txt
tail
tail -n +5 Finn-txt
tail -n +5 Finn.txt
wc Finn.txt
wc -l Finn.txt
wc -w Finn.txt
echo "help meeeee" | wc
wc Text_example.txt
cat Text_example.txt
cat Text_example.txt | wc
cat Text_example.txt | head 10 | wc
cat Text_example.txt | head | wc
clear
cat Text_example.txt | head -3 | wc
head -3 Text_example.txt |wc
cat Text_example.txt |wc > salida
ll
file salida
cat Text_example.txt |wc > salida
cat salida
cat Text_example.txt |wc >> salida
car salida
cat salidad
cat salida
head -1 salida
head -2 salida
head -10 salida
wc < Text_example.txt
ll
cd ~c
cd ~
cd opentraveldata
cd Data/opentraveldata
ll
ls -S
ls -s
ls S
ls -S
ll -S
ll -S | head -n 1
ll -S | head 
ll -S | head -n 1
ll -S | head -n -1
ll -S | head -n -3
ll -S | head -n -3 > largest_file.txt
ll
cat largest_file.txt
ll -S | head -n -3 > largest_file.txt
ll -S | head -n -3
ll -S | head -n -4
ll -S | head -n -4 > largest_file.text
cat largest_file.txt
ll
ll -S head
ll -S | head -n 1
ll -S | head -1
ll -S | head -n -5
ll -S | head -n -5 > largest_file.txt
cat largest_file.txt
lls
ll
cd ..
ll
cd shell
ll
Finn.txt | head -n -5
cat Finn.txt | head -n -5
cat Finn.txt | head -n 5
cat Finn.txt | head -n 5 | wc
ll
less Text_example.txt
less Text_example.txt -N
less -N Text_example.txt 
cat -N Text_example.txt 
cat Text_example.txt
cat Text_example.txt | head -n 5
cat Text_example.txt | head -n 5 | less -N
ll
ll -S
cat Text_example.txt | head -n 5| tail -1
cd ~
cd Data
cd opentraveldata
ls -l 
ls -l -S
cd ..
cd shell
cat Text_example.txt | head -n 5 | less -N
cd ..
ll
git init ClasesMaster
cd ClasesMaster
mkdir Shell
mkdir Python
mkdir Challenge
cd Shell
cat ~/.history > shell_clase_2020-11-14.txt
